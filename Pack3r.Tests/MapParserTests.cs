using Pack3r.IO;
using Pack3r.Logging;
using Pack3r.Parsers;

namespace Pack3r.Tests;

public static class MapParserTests
{
    private static MapFileParser CreateParser(ILineReader reader, PackOptions? options = null)
    {
        return new MapFileParser(NullLogger<MapFileParser>.Instance, reader, options ?? new() { MapFile = null! });
    }

    [Theory, InlineData(true), InlineData(false)]
    public static async Task Should_Include_Dev_Assets(bool include)
    {
        var reader = new StringLineReader("""
            // entity 0
            {
            "classname" "worldspawn"
            "nofalldamage" "2"
            "portalsurfaces" "0"
            }
            // entity 1
            {
            "classname" "misc_model"
            "model" "path/to/model.md3"
            }
            """);

        var map = await CreateParser(reader, new PackOptions { OnlySource = include, MapFile = null! })
            .ParseMapAssets("C:/ET/etmain/maps/test.map", default);

        if (include)
        {
            Assert.Single(map.Resources);
            Assert.Equal("path/to/model.md3", map.Resources.First().Value.ToString());
        }
        else
        {
            Assert.Empty(map.Resources);
        }
    }

    [Fact]
    public static async Task Should_Parse_Simple_Map()
    {
        var reader = new StringLineReader("""
            // entity 0
            {
            "classname" "worldspawn"
            // brush 0
            {
            brushDef
            {
            ( 24 72 64 ) ( 24 -24 64 ) ( -16 72 64 ) ( ( 0.015625 0 0.5 ) ( 0 0.015625 0.5 ) ) pgm_props/crate_01 0 0 0
            ( 24 32 64 ) ( -16 32 64 ) ( 24 32 32 ) ( ( 0.0156250056 0 0.5000003576 ) ( 0 0.015625 0 ) ) pgm_props/crate_01 0 0 0
            ( 32 72 64 ) ( 32 72 32 ) ( 32 -24 64 ) ( ( 0.0156250037 0 0.5000001192 ) ( 0 0.015625 0 ) ) pgm_props/crate_01 0 0 0
            ( -16 -16 0 ) ( 24 -16 0 ) ( -16 80 0 ) ( ( 0.015625 0 0.5 ) ( 0 0.015625 0.5 ) ) pgm_props/crate_01 0 0 0
            ( -16 -32 32 ) ( -16 -32 64 ) ( 24 -32 32 ) ( ( 0.0156250019 0 0.5 ) ( 0 0.015625 0 ) ) pgm_props/crate_01 0 0 0
            ( -32 -24 32 ) ( -32 72 32 ) ( -32 -24 64 ) ( ( 0.015625 0 0.5 ) ( 0 0.015625 0 ) ) pgm_props/crate_01 0 0 0
            }
            }
            }
            
            """);

        var parser = CreateParser(reader);

        var map = await parser.ParseMapAssets("C:/ET/etmain/maps/test.map", default);

        Assert.Single(map.Shaders);
        Assert.Equal("textures/pgm_props/crate_01", map.Shaders.First().Value.ToString());
    }

    [Fact]
    public static async Task Should_Parse_Complex_Map()
    {
        var reader = new StringLineReader("""
        // entity 0
        {
        "classname" "worldspawn"
        // brush 0
        {
        brushDef
        {
        ( 128 128 256 ) ( 128 -128 256 ) ( 0 128 256 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 128 128 ) ( 0 128 128 ) ( 128 128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 128 128 ) ( 128 128 -128 ) ( 128 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -128 ) ( 0 -128 128 ) ( 128 -128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -128 -128 -128 ) ( -128 128 -128 ) ( -128 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 128 128 ) ( 128 -128 128 ) ( 128 128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 1
        {
        brushDef
        {
        ( 128 128 128 ) ( 128 -128 128 ) ( 0 128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 256 128 ) ( 0 256 128 ) ( 128 256 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 128 128 ) ( 128 128 -128 ) ( 128 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -128 ) ( 128 -128 -128 ) ( 0 128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -128 -128 -128 ) ( -128 128 -128 ) ( -128 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 128 -128 ) ( 0 128 128 ) ( 128 128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 2
        {
        brushDef
        {
        ( 128 128 128 ) ( 128 -128 128 ) ( 0 128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 128 128 ) ( 0 128 128 ) ( 128 128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 256 128 128 ) ( 256 128 -128 ) ( 256 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -128 ) ( 128 -128 -128 ) ( 0 128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -128 ) ( 0 -128 128 ) ( 128 -128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 -128 128 ) ( 128 128 -128 ) ( 128 128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 3
        {
        brushDef
        {
        ( 128 128 128 ) ( 0 128 128 ) ( 128 128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 128 128 ) ( 128 128 -128 ) ( 128 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -256 ) ( 128 -128 -256 ) ( 0 128 -256 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -128 ) ( 0 -128 128 ) ( 128 -128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -128 -128 -128 ) ( -128 128 -128 ) ( -128 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 128 -128 ) ( 128 -128 -128 ) ( 0 -128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 4
        {
        brushDef
        {
        ( 128 128 128 ) ( 128 -128 128 ) ( 0 128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 128 128 ) ( 128 128 -128 ) ( 128 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -128 ) ( 128 -128 -128 ) ( 0 128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -256 -128 ) ( 0 -256 128 ) ( 128 -256 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -128 -128 -128 ) ( -128 128 -128 ) ( -128 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 -128 -128 ) ( 0 -128 128 ) ( 0 -128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 5
        {
        brushDef
        {
        ( 128 128 128 ) ( 128 -128 128 ) ( 0 128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 128 128 128 ) ( 0 128 128 ) ( 128 128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -128 ) ( 128 -128 -128 ) ( 0 128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 0 -128 -128 ) ( 0 -128 128 ) ( 128 -128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -256 -128 -128 ) ( -256 128 -128 ) ( -256 -128 128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -128 -128 128 ) ( -128 128 -128 ) ( -128 -128 -128 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 6
        {
        brushDef
        {
        ( -64 32 96 ) ( -64 -64 96 ) ( -96 32 96 ) ( ( 0 0.0078125 0 ) ( -0.0078125009 0 -0.2500000894 ) ) pgm/holo 0 0 0
        ( -64 -40 96 ) ( -96 -40 96 ) ( -64 -40 -64 ) ( ( -0.0078125037 0 0.8124999404 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 32 96 ) ( -64 32 -64 ) ( -64 -64 96 ) ( ( 0 0.0078125009 0.2500000596 ) ( -0.0078125009 0 -0.2500000894 ) ) pgm/holo 0 0 0
        ( -96 -64 0 ) ( -64 -64 0 ) ( -96 32 0 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -96 -64 -64 ) ( -96 -64 96 ) ( -64 -64 -64 ) ( ( 0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -88 -64 -64 ) ( -88 32 -64 ) ( -88 -64 96 ) ( ( -0.0078125047 0 0.4374998212 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        }
        }
        // brush 7
        {
        brushDef
        {
        ( -48 40 -32 ) ( -48 -40 -32 ) ( -64 40 -32 ) ( ( 0 0.0078125 0 ) ( -0.0078125009 0 0.75 ) ) pgm/holo 0 0 0
        ( -48 40 96 ) ( -64 40 96 ) ( -48 40 -64 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 32 40 -32 ) ( 32 40 -192 ) ( 32 -40 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 -40 -64 ) ( -48 -40 -64 ) ( -64 40 -64 ) ( ( 0.0078125 -0 0.8794416785 ) ( 0 0.0078125009 0.062500082 ) ) pgm/holo 0 0 0
        ( -64 -40 -64 ) ( -64 -40 96 ) ( -48 -40 -64 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 -40 -64 ) ( -64 40 -64 ) ( -64 -40 96 ) ( ( -0.0078125028 0 -0.3750001788 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        }
        }
        // brush 8
        {
        patchDef2
        {
        pgm/holo
        ( 9 3 0 0 0 )
        (
        ( ( 64 -52 -64 0.40625 0.5 ) ( 64 -52 16 0.40625 -0.125 ) ( 64 -52 96 0.40625 -0.75 ) )
        ( ( 64 -64 -64 0.5 0.5 ) ( 64 -64 16 0.5 -0.125 ) ( 64 -64 96 0.5 -0.75 ) )
        ( ( 76 -64 -64 0.5 0.5 ) ( 76 -64 16 0.5 -0.125 ) ( 76 -64 96 0.5 -0.75 ) )
        ( ( 88 -64 -64 0.5 0.5 ) ( 88 -64 16 0.5 -0.125 ) ( 88 -64 96 0.5 -0.75 ) )
        ( ( 88 -52 -64 0.40625 0.5 ) ( 88 -52 16 0.40625 -0.125 ) ( 88 -52 96 0.40625 -0.75 ) )
        ( ( 88 -40 -64 0.3125 0.5 ) ( 88 -40 16 0.3125 -0.125 ) ( 88 -40 96 0.3125 -0.75 ) )
        ( ( 76 -40 -64 0.3125 0.5 ) ( 76 -40 16 0.3125 -0.125 ) ( 76 -40 96 0.3125 -0.75 ) )
        ( ( 64 -40 -64 0.3125 0.5 ) ( 64 -40 16 0.3125 -0.125 ) ( 64 -40 96 0.3125 -0.75 ) )
        ( ( 64 -52 -64 0.40625 0.5 ) ( 64 -52 16 0.40625 -0.125 ) ( 64 -52 96 0.40625 -0.75 ) )
        )
        }
        }
        // brush 9
        {
        patchDef2
        {
        pgm/holo
        ( 3 5 0 0 0 )
        (
        ( ( 64 -52 -64 -0.40625 -0.5 ) ( 64 -64 -64 -0.5 -0.5 ) ( 76 -64 -64 -0.5 -0.59375 ) ( 88 -64 -64 -0.5 -0.6875 ) ( 88 -52 -64 -0.40625 -0.6875 ) )
        ( ( 64 -52 -64 -0.40625 -0.5 ) ( 64 -52 -64 -0.40625 -0.5 ) ( 76 -52 -64 -0.40625 -0.59375 ) ( 88 -52 -64 -0.40625 -0.6875 ) ( 88 -52 -64 -0.40625 -0.6875 ) )
        ( ( 64 -52 -64 -0.40625 -0.5 ) ( 64 -40 -64 -0.3125 -0.5 ) ( 76 -40 -64 -0.3125 -0.59375 ) ( 88 -40 -64 -0.3125 -0.6875 ) ( 88 -52 -64 -0.40625 -0.6875 ) )
        )
        }
        }
        // brush 10
        {
        patchDef2
        {
        pgm/holo
        ( 3 5 0 0 0 )
        (
        ( ( 64 -52 96 -0.40625 0.5 ) ( 64 -40 96 -0.3125 0.5 ) ( 76 -40 96 -0.3125 0.59375 ) ( 88 -40 96 -0.3125 0.6875 ) ( 88 -52 96 -0.40625 0.6875 ) )
        ( ( 64 -52 96 -0.40625 0.5 ) ( 64 -52 96 -0.40625 0.5 ) ( 76 -52 96 -0.40625 0.59375 ) ( 88 -52 96 -0.40625 0.6875 ) ( 88 -52 96 -0.40625 0.6875 ) )
        ( ( 64 -52 96 -0.40625 0.5 ) ( 64 -64 96 -0.5 0.5 ) ( 76 -64 96 -0.5 0.59375 ) ( 88 -64 96 -0.5 0.6875 ) ( 88 -52 96 -0.40625 0.6875 ) )
        )
        }
        }
        // brush 11
        {
        patchDef2
        {
        pgm/holo
        ( 9 3 0 0 0 )
        (
        ( ( 64 52 -64 0.40625 0.5 ) ( 64 52 16 0.40625 -0.125 ) ( 64 52 96 0.40625 -0.75 ) )
        ( ( 64 40 -64 0.5 0.5 ) ( 64 40 16 0.5 -0.125 ) ( 64 40 96 0.5 -0.75 ) )
        ( ( 76 40 -64 0.5 0.5 ) ( 76 40 16 0.5 -0.125 ) ( 76 40 96 0.5 -0.75 ) )
        ( ( 88 40 -64 0.5 0.5 ) ( 88 40 16 0.5 -0.125 ) ( 88 40 96 0.5 -0.75 ) )
        ( ( 88 52 -64 0.40625 0.5 ) ( 88 52 16 0.40625 -0.125 ) ( 88 52 96 0.40625 -0.75 ) )
        ( ( 88 64 -64 0.3125 0.5 ) ( 88 64 16 0.3125 -0.125 ) ( 88 64 96 0.3125 -0.75 ) )
        ( ( 76 64 -64 0.3125 0.5 ) ( 76 64 16 0.3125 -0.125 ) ( 76 64 96 0.3125 -0.75 ) )
        ( ( 64 64 -64 0.3125 0.5 ) ( 64 64 16 0.3125 -0.125 ) ( 64 64 96 0.3125 -0.75 ) )
        ( ( 64 52 -64 0.40625 0.5 ) ( 64 52 16 0.40625 -0.125 ) ( 64 52 96 0.40625 -0.75 ) )
        )
        }
        }
        // brush 12
        {
        patchDef2
        {
        pgm/holo
        ( 3 5 0 0 0 )
        (
        ( ( 64 52 -64 -0.40625 -0.5 ) ( 64 40 -64 -0.5 -0.5 ) ( 76 40 -64 -0.5 -0.59375 ) ( 88 40 -64 -0.5 -0.6875 ) ( 88 52 -64 -0.40625 -0.6875 ) )
        ( ( 64 52 -64 -0.40625 -0.5 ) ( 64 52 -64 -0.40625 -0.5 ) ( 76 52 -64 -0.40625 -0.59375 ) ( 88 52 -64 -0.40625 -0.6875 ) ( 88 52 -64 -0.40625 -0.6875 ) )
        ( ( 64 52 -64 -0.40625 -0.5 ) ( 64 64 -64 -0.3125 -0.5 ) ( 76 64 -64 -0.3125 -0.59375 ) ( 88 64 -64 -0.3125 -0.6875 ) ( 88 52 -64 -0.40625 -0.6875 ) )
        )
        }
        }
        // brush 13
        {
        patchDef2
        {
        pgm/holo
        ( 3 5 0 0 0 )
        (
        ( ( 64 52 96 -0.40625 0.5 ) ( 64 64 96 -0.3125 0.5 ) ( 76 64 96 -0.3125 0.59375 ) ( 88 64 96 -0.3125 0.6875 ) ( 88 52 96 -0.40625 0.6875 ) )
        ( ( 64 52 96 -0.40625 0.5 ) ( 64 52 96 -0.40625 0.5 ) ( 76 52 96 -0.40625 0.59375 ) ( 88 52 96 -0.40625 0.6875 ) ( 88 52 96 -0.40625 0.6875 ) )
        ( ( 64 52 96 -0.40625 0.5 ) ( 64 40 96 -0.5 0.5 ) ( 76 40 96 -0.5 0.59375 ) ( 88 40 96 -0.5 0.6875 ) ( 88 52 96 -0.40625 0.6875 ) )
        )
        }
        }
        // brush 14
        {
        brushDef
        {
        ( 56 64 -32 ) ( 56 -64 -32 ) ( 32 64 -32 ) ( ( 0 0.0078125 0 ) ( -0.0078125009 0 0.75 ) ) pgm/holo 0 0 0
        ( 32 -64 -64 ) ( 56 -64 -64 ) ( 32 64 -64 ) ( ( 0.0078125 -0 0.8794416785 ) ( 0 0.0078125009 0.062500082 ) ) pgm/holo 0 0 0
        ( 32 -64 -192 ) ( 32 64 -192 ) ( 32 -64 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 32 64 96 ) ( 40 56 96 ) ( 32 64 107.3137083054 ) ( ( 0.0078125 0 0.3321067095 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( 40 -56 96 ) ( 32 -64 96 ) ( 40 -56 107.3137083054 ) ( ( 0.0078125 0 0.4267766774 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( 72 24 96 ) ( 72 16 96 ) ( 72 24 104 ) ( ( 0.0078125 -0 0.8794416785 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        }
        }
        // brush 15
        {
        brushDef
        {
        ( -48 -32 -32 ) ( -48 -112 -32 ) ( -64 -32 -32 ) ( ( 0 0.0078125 0 ) ( -0.0078125009 0 -0.2500000298 ) ) pgm/holo 0 0 0
        ( -48 -40 96 ) ( -64 -40 96 ) ( -48 -40 -64 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( 32 -32 -32 ) ( 32 -32 -192 ) ( 32 -112 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 -112 -64 ) ( -48 -112 -64 ) ( -64 -32 -64 ) ( ( 0.0078125 -0 0.8794416785 ) ( 0 0.0078125009 0.062500082 ) ) pgm/holo 0 0 0
        ( -64 -64 -64 ) ( -64 -64 96 ) ( -48 -64 -64 ) ( ( 0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 -40 -64 ) ( -32 -40 -32 ) ( -64 -85.2548332214 -64 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 16
        {
        brushDef
        {
        ( -32 -40 -24 ) ( -48 -40 -24 ) ( -32 -40 -32 ) ( ( -0.0078125 0 0 ) ( -0 -0.0078125019 0.3125000894 ) ) pgm/holo 0 0 0
        ( -64 -40 -32 ) ( -64 -64 -32 ) ( -32 -64 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -48 -64 -32 ) ( -48 -64 -24 ) ( -32 -64 -32 ) ( ( 0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 -64 -32 ) ( -64 -40 -32 ) ( -48 -64 -24 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -48 -40 -24 ) ( -32 -40 -32 ) ( -48 -57.8885440826 -24 ) ( ( 0 0.0078125 -0.1394966096 ) ( -0.0078125009 0 -0.247731939 ) ) pgm/holo 0 0 0
        }
        }
        // brush 17
        {
        brushDef
        {
        ( -64 -40 0 ) ( -56 -40 -16 ) ( -56 -40 0 ) ( ( -0.0078125 0 0 ) ( -0 -0.0078125019 0.3125000894 ) ) pgm/holo 0 0 0
        ( -64 -64 0 ) ( -64 -64 -32 ) ( -64 -40 -32 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 -64 0 ) ( -56 -64 -16 ) ( -64 -64 -16 ) ( ( 0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -56 -64 -16 ) ( -64 -40 -32 ) ( -64 -64 -32 ) ( ( -0.125 0 0 ) ( -0 0.125 0.7888543606 ) ) common/caulk 0 0 0
        ( -56 -57.8885440826 -16 ) ( -64 -40 0 ) ( -56 -40 -16 ) ( ( 0 0.0078125 -0.4003712535 ) ( -0.0078125009 0 -0.247731939 ) ) pgm/holo 0 0 0
        }
        }
        // brush 18
        {
        brushDef
        {
        ( -64 32 0 ) ( -64 -64 0 ) ( -96 32 0 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 -40 96 ) ( -96 -40 96 ) ( -64 -40 -64 ) ( ( -0.0078125037 0 0.8124999404 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 32 96 ) ( -64 32 -64 ) ( -64 -64 96 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -96 -64 -64 ) ( -96 -64 96 ) ( -64 -64 -64 ) ( ( 0.0078125 0 -0 ) ( -0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -88 -64 -64 ) ( -88 32 -64 ) ( -88 -64 96 ) ( ( -0.0078125047 0 -0.5625001788 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 -40 -32 ) ( -80 -40 -32 ) ( -64 -56 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 19
        {
        brushDef
        {
        ( -64 -40 -32 ) ( -32 -64 -32 ) ( -64 -64 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -32 -64 -32 ) ( -64 -64 -64 ) ( -64 -64 -32 ) ( ( 0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 -64 -64 ) ( -64 -40 -32 ) ( -64 -64 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 -64 -64 ) ( -32 -40 -32 ) ( -64 -40 -64 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -32 -40 -32 ) ( -64 -40 -32 ) ( -64 -40 -64 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 20
        {
        brushDef
        {
        ( -64 -64 -32 ) ( -48 -64 -24 ) ( -48 -40 -24 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -48 -64 -24 ) ( -56 -40 -16 ) ( -48 -40 -24 ) ( ( -0 0.0078124995 -0.2632529438 ) ( -0.0078125009 0 -0.247731939 ) ) pgm/holo 0 0 0
        ( -48 -40 -24 ) ( -56 -40 -16 ) ( -64 -40 -32 ) ( ( -0.0078125 0 0 ) ( -0 -0.0078125019 0.3125000894 ) ) pgm/holo 0 0 0
        ( -56 -40 -16 ) ( -56 -64 -16 ) ( -64 -40 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -48 -64 -24 ) ( -64 -64 -32 ) ( -56 -64 -16 ) ( ( 0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        }
        }
        // brush 21
        {
        brushDef
        {
        ( -64 -40 96 ) ( -96 -40 96 ) ( -64 -40 -64 ) ( ( -0.0078125037 0 -0.1875000745 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 32 96 ) ( -64 32 -64 ) ( -64 -64 96 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        ( -96 -64 -64 ) ( -64 -64 -64 ) ( -96 32 -64 ) ( ( 0.0078125 -0 0.8794416785 ) ( 0 0.0078125009 0.062500082 ) ) pgm/holo 0 0 0
        ( -96 -64 -64 ) ( -96 -64 96 ) ( -64 -64 -64 ) ( ( 0.0078125 0 -0 ) ( -0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -88 -64 -64 ) ( -88 32 -64 ) ( -88 -64 96 ) ( ( -0.0078125047 0 -0.5625001788 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 -40 -32 ) ( -64 -56 -32 ) ( -80 -40 -32 ) ( ( 0.125 0 -0 ) ( -0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 22
        {
        brushDef
        {
        ( -96 -32 96 ) ( -64 64 96 ) ( -64 -32 96 ) ( ( 0 -0.0078125019 0.1874999404 ) ( -0.0078125009 0 0.5625 ) ) pgm/holo 0 0 0
        ( -64 40 -64 ) ( -96 40 96 ) ( -64 40 96 ) ( ( -0.0078125019 0 -0.8125000596 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 64 96 ) ( -64 -32 -64 ) ( -64 -32 96 ) ( ( -0.0078125009 0 0.0000000342 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -96 -32 0 ) ( -64 64 0 ) ( -96 64 0 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 64 -64 ) ( -96 64 96 ) ( -96 64 -64 ) ( ( -0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -88 64 96 ) ( -88 -32 -64 ) ( -88 64 -64 ) ( ( -0.0078125009 0 0.8124999404 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        }
        }
        // brush 23
        {
        brushDef
        {
        ( -64 32 -32 ) ( -48 112 -32 ) ( -48 32 -32 ) ( ( 0 0.0078125 0 ) ( -0.0078125009 0 0.75 ) ) pgm/holo 0 0 0
        ( -48 40 -64 ) ( -64 40 96 ) ( -48 40 96 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( 32 112 -32 ) ( 32 32 -192 ) ( 32 32 -32 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 32 -64 ) ( -48 112 -64 ) ( -64 112 -64 ) ( ( 0.0078125 -0 0.8794416785 ) ( 0 0.0078125009 0.062500082 ) ) pgm/holo 0 0 0
        ( -48 64 -64 ) ( -64 64 96 ) ( -64 64 -64 ) ( ( -0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 85.2548332214 -64 ) ( -32 40 -32 ) ( -64 40 -64 ) ( ( -0.125 0 -1 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 24
        {
        brushDef
        {
        ( -32 40 -32 ) ( -48 40 -24 ) ( -32 40 -24 ) ( ( -0.0078125019 0 0.1874999404 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -32 64 -32 ) ( -64 64 -32 ) ( -64 40 -32 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -32 64 -32 ) ( -48 64 -24 ) ( -48 64 -32 ) ( ( -0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -48 64 -24 ) ( -64 40 -32 ) ( -64 64 -32 ) ( ( -0.125 0 -1 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -48 57.8885440826 -24 ) ( -32 40 -32 ) ( -48 40 -24 ) ( ( 0 0.0078125 0.8618034124 ) ( -0.0078125009 0 0.75 ) ) pgm/holo 0 0 0
        }
        }
        // brush 25
        {
        brushDef
        {
        ( -56 40 0 ) ( -56 40 -16 ) ( -64 40 0 ) ( ( -0.0078125019 0 0.1874999404 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 40 -32 ) ( -64 64 -32 ) ( -64 64 0 ) ( ( 0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 64 -16 ) ( -56 64 -16 ) ( -64 64 0 ) ( ( -0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 64 -32 ) ( -64 40 -32 ) ( -56 64 -16 ) ( ( 0.125 0 -0 ) ( 0 0.125 0.7888543606 ) ) common/caulk 0 0 0
        ( -56 40 -16 ) ( -64 40 0 ) ( -56 57.8885440826 -16 ) ( ( -0 0.0078124991 -0.3942900598 ) ( -0.0078125009 0 0.75 ) ) pgm/holo 0 0 0
        }
        }
        // brush 26
        {
        brushDef
        {
        ( -96 -32 0 ) ( -64 64 0 ) ( -64 -32 0 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 40 -64 ) ( -96 40 96 ) ( -64 40 96 ) ( ( -0.0078125019 0 0.1874999404 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 64 96 ) ( -64 -32 -64 ) ( -64 -32 96 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -64 64 -64 ) ( -96 64 96 ) ( -96 64 -64 ) ( ( -0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -88 64 96 ) ( -88 -32 -64 ) ( -88 64 -64 ) ( ( -0.0078125009 0 0.8124999404 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 56 -32 ) ( -80 40 -32 ) ( -64 40 -32 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 27
        {
        brushDef
        {
        ( -48 40 -24 ) ( -48 64 -24 ) ( -64 64 -32 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -48 40 -24 ) ( -56 40 -16 ) ( -48 64 -24 ) ( ( -0 0.0078124995 -0.2571717203 ) ( -0.0078125009 0 0.75 ) ) pgm/holo 0 0 0
        ( -64 40 -32 ) ( -56 40 -16 ) ( -48 40 -24 ) ( ( -0.0078125019 0 0.1874999404 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 40 -32 ) ( -56 64 -16 ) ( -56 40 -16 ) ( ( -0.125 0 -0 ) ( 0 0.125 -0 ) ) common/caulk 0 0 0
        ( -56 64 -16 ) ( -64 64 -32 ) ( -48 64 -24 ) ( ( -0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        }
        }
        // brush 28
        {
        brushDef
        {
        ( -64 40 -64 ) ( -96 40 96 ) ( -64 40 96 ) ( ( -0.0078125019 0 -0.5625001788 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 64 96 ) ( -64 -32 -64 ) ( -64 -32 96 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        ( -96 -32 -64 ) ( -64 64 -64 ) ( -96 64 -64 ) ( ( 0.0078125 -0 0.8794416785 ) ( 0 0.0078125009 0.062500082 ) ) pgm/holo 0 0 0
        ( -64 64 -64 ) ( -96 64 96 ) ( -96 64 -64 ) ( ( -0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -88 64 96 ) ( -88 -32 -64 ) ( -88 64 -64 ) ( ( -0.0078125009 0 -0.1875000596 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -80 40 -32 ) ( -64 56 -32 ) ( -64 40 -32 ) ( ( -0.125 0 0 ) ( 0 0.125 0 ) ) common/caulk 0 0 0
        }
        }
        // brush 29
        {
        brushDef
        {
        ( -64 64 -32 ) ( -32 40 -32 ) ( -64 40 -32 ) ( ( 0.0078125 0 -0 ) ( -0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -32 40 -32 ) ( -64 40 -64 ) ( -64 40 -32 ) ( ( 0.0078125 0 -0 ) ( -0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 40 -64 ) ( -64 64 -32 ) ( -64 40 -32 ) ( ( 0.0078125 0 -0 ) ( -0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -64 40 -64 ) ( -32 64 -32 ) ( -64 64 -64 ) ( ( 0.0078125 0 -0 ) ( -0 0.0078125 0 ) ) pgm/holo 0 0 0
        ( -32 64 -32 ) ( -64 64 -32 ) ( -64 64 -64 ) ( ( -0.0078125 0 0 ) ( 0 0.0078125 0 ) ) pgm/holo 0 0 0
        }
        }
        }
        // entity 1
        {
        "classname" "info_player_deathmatch"
        "origin" "-24 -72 -96"
        }
        """);

        var parser = CreateParser(reader);

        var map = await parser.ParseMapAssets("C:/ET/etmain/maps/test.map", default);

        Assert.Single(map.Shaders);
        Assert.Equal("textures/pgm/holo", map.Shaders.First().Value.ToString());
    }
}
